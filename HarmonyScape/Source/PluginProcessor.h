#pragma once

#include "JuceHeader.h"
#include "ChordEngine/ChordEngine.h"
#include "SpatialEngine/SpatialEngine.h"

//==============================================================================
/**
 * HarmonyScape audio processor implementing basic chord input and spatial distribution
 */
class HarmonyScapeAudioProcessor  : public juce::AudioProcessor
{
public:
    //==============================================================================
    HarmonyScapeAudioProcessor();
    ~HarmonyScapeAudioProcessor() override;

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    bool isBusesLayoutSupported (const BusesLayout& layouts) const override;

    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    //==============================================================================
    juce::AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const juce::String getName() const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool isMidiEffect() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const juce::String getProgramName (int index) override;
    void changeProgramName (int index, const juce::String& newName) override;

    //==============================================================================
    void getStateInformation (juce::MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    //==============================================================================
    // Get the active user input notes (for visual display)
    juce::Array<int> getUserInputNotes() const;
    
    // Get the generated notes (for visual display)
    juce::Array<int> getGeneratedNotes() const;
    
    // Get notes that are in release phase but still audible (for keyboard display)
    juce::Array<int> getReleasingNotes() const;
    
    // Update the active voice information from the SpatialEngine
    void updateActiveVoices(const juce::Array<int>& activeVoiceNotes);

private:
    // Chord engine for chord recognition and voicing
    ChordEngine chordEngine;
    
    // Spatial engine for stereo positioning
    SpatialEngine spatialEngine;
    
    // Value tree for plugin state
    juce::AudioProcessorValueTreeState parameters;
    
    // Parameters
    std::atomic<float>* chordDensityParam = nullptr;
    std::atomic<float>* spatialWidthParam = nullptr;
    std::atomic<float>* waveformParam = nullptr;
    std::atomic<float>* volumeParam = nullptr;
    
    // ADSR parameters
    std::atomic<float>* attackParam = nullptr;
    std::atomic<float>* decayParam = nullptr;
    std::atomic<float>* sustainParam = nullptr;
    std::atomic<float>* releaseParam = nullptr;
    
    // For keyboard visualization
    juce::Array<int> userInputNotes;          // Notes actively pressed by user
    juce::Array<int> generatedOutputNotes;    // Notes generated by chord engine
    juce::Array<int> releasingNotes;          // Notes in release phase but still sounding
    
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (HarmonyScapeAudioProcessor)
}; 